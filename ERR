=================================================================
==88332==ERROR: AddressSanitizer: heap-use-after-free on address 0x602000000f70 at pc 0x0001013f0f95 bp 0x7fff5e843100 sp 0x7fff5e8430f8
READ of size 1 at 0x602000000f70 thread T0
    #0 0x1013f0f94 in ft_strlen ft_strlen.c:20
    #1 0x1013f2b10 in ft_implode ft_implode.c:39
    #2 0x1013c2d84 in search_exec (yosh:x86_64+0x100006d84)
    #3 0x1013c20ea in wait_exec (yosh:x86_64+0x1000060ea)
    #4 0x1013c30c9 in exec_cli (yosh:x86_64+0x1000070c9)
    #5 0x1013c3785 in sort_comm (yosh:x86_64+0x100007785)
    #6 0x1013ce82e in split_co (yosh:x86_64+0x10001282e)
    #7 0x1013d1c9a in hard_split (yosh:x86_64+0x100015c9a)
    #8 0x1013bdb34 in main (yosh:x86_64+0x100001b34)
    #9 0x7fffc683d234 in start (libdyld.dylib:x86_64+0x5234)

0x602000000f70 is located 0 bytes inside of 9-byte region [0x602000000f70,0x602000000f79)
freed by thread T0 here:
    #0 0x101485126 in wrap_free (libclang_rt.asan_osx_dynamic.dylib:x86_64+0x56126)
    #1 0x1013f0075 in ft_memdel ft_memdel.c:17
    #2 0x1013cc6d2 in add_comm (yosh:x86_64+0x1000106d2)
    #3 0x1013ce3dd in norm (yosh:x86_64+0x1000123dd)
    #4 0x1013ce646 in split_co (yosh:x86_64+0x100012646)
    #5 0x1013d1c9a in hard_split (yosh:x86_64+0x100015c9a)
    #6 0x1013bdb34 in main (yosh:x86_64+0x100001b34)
    #7 0x7fffc683d234 in start (libdyld.dylib:x86_64+0x5234)

previously allocated by thread T0 here:
    #0 0x101484f5c in wrap_malloc (libclang_rt.asan_osx_dynamic.dylib:x86_64+0x55f5c)
    #1 0x1013f17a7 in ft_strnew ft_strnew.c:24
    #2 0x1013e5bff in replace (yosh:x86_64+0x100029bff)
    #3 0x1013e5bb5 in ft_find_and_replace (yosh:x86_64+0x100029bb5)
    #4 0x1013cde9d in norm (yosh:x86_64+0x100011e9d)
    #5 0x1013ce646 in split_co (yosh:x86_64+0x100012646)
    #6 0x1013d1c9a in hard_split (yosh:x86_64+0x100015c9a)
    #7 0x1013bdb34 in main (yosh:x86_64+0x100001b34)
    #8 0x7fffc683d234 in start (libdyld.dylib:x86_64+0x5234)

SUMMARY: AddressSanitizer: heap-use-after-free ft_strlen.c:20 in ft_strlen
Shadow bytes around the buggy address:
  0x1c0400000190: fa fa fd fd fa fa fd fd fa fa fd fd fa fa fd fd
  0x1c04000001a0: fa fa fd fa fa fa fd fd fa fa fd fd fa fa fd fa
  0x1c04000001b0: fa fa fd fa fa fa fd fa fa fa fd fd fa fa fd fd
  0x1c04000001c0: fa fa fd fd fa fa fd fd fa fa fd fa fa fa fd fa
  0x1c04000001d0: fa fa 04 fa fa fa fd fa fa fa fd fa fa fa fd fa
=>0x1c04000001e0: fa fa 06 fa fa fa fd fa fa fa 00 01 fa fa[fd]fd
  0x1c04000001f0: fa fa fd fd fa fa fd fa fa fa 00 03 fa fa 00 02
  0x1c0400000200: fa fa 00 01 fa fa fd fd fa fa fd fd fa fa fd fa
  0x1c0400000210: fa fa 00 03 fa fa 00 02 fa fa 06 fa fa fa fd fa
  0x1c0400000220: fa fa fd fa fa fa fd fa fa fa 00 fa fa fa 07 fa
  0x1c0400000230: fa fa fd fd fa fa fd fd fa fa fd fa fa fa fd fd
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==88332==ABORTING
